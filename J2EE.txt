
Servlet : Servlet API (javax.servlet)
          Servlet is a Java Program which runs on the server used to
          create dynamic web pages.
          Servlet is a technology

Web container : Contains the Web Applications 

Web Server : Tomcat, Jetty, Glassfish

Web Client : Firefox, Chrome, Opera

Creation of Servlet : 1) On extending HttpServlet class
		      2) On extending GenericServlet class (implements Servlet, ServletConfig, Serializable) 

 GenericServlet class is superclass for HttpServlet
		

Servlet Lifecycle : 1) Loading the servlet
                    2) Creation of servlet instance
                    3) Initialization on calling init()
                    4) Invoking the service()
                    5) Invoke the destroy method

URL Pattern : 
            Change URL in @WebServlet annotaion

Servlet Mapping:

                Servlet can be mapped with a URL in web.xml (Deployment descriptor)

                Single servlet can be mapped with different URLs

                FirstServlet : servlet

    URL 1 :  /FirstServlet 

    URL 2 :  /FirstServlet/Welcome

    URL 3 :  /FirstServlet/Hello


Get Parameter values from URL in the servlet :

                                              getParameter() : used to get parameter value from URL, use it with request object

                  
Query String : 
                ?firstname=Rohit&lastname=Dhavan 
             

<Welcome-File-Tag> of XML file :
                                THe file written in this tag will be displayed first in the browser


 ServletConfig : interface
                         Its object is used to access the servlet configuration information from web.xml
                         

               methods :  getInitParameter() : To access one parameter at a time
                          getInitParameterNames() : Multiple parameters can be accessed
                          getServletName()
                          getServletConfig()


			   <Init-param> 
				<param-name></param-name>
				<param-value></param-value>
			   <Init-param> 
	

 ServletContext : interface
			used to share confinfiguration information about an Application for all servlets                 

		  methods : getInitParameter() : To access one parameter at a time
                            getInitParameterNames() : Multiple parameters can be accessed
                    	    setAttribute()   : Sets the object
		            getAttribute()   : retrieve object
		            removeAttribute(): removes object

                             
 Attributes in Servlet :
                             
 
 HttpServletRequst :              

			getParameter() : At a time one value can be retrieved
			getParameterValues() : At a time multiple values can be retrieved from URL 


 Creation of Form in Html & send data from the HTML form to database

 
 RequestDispatcher : interface

			Used to dispatch the request from one resource(servlet/jsp) to another resource.
			Used to include the content of one resource into another resource

 methods :  forward(request,responce) 
			forwards the request within the same application
			works on server side

	    include(request,response)

 
 HttpServletResponse
            method:  sendRedirect()
            	Redirect the response to another resource
            	Accepts URL as a parameter
                redirect the response from your application to another application
		works on clint side



  Filter :interface 
          Does filtering task like validation
          Apply on Servlets
          One servlet can have multiple filters
	  filters are independent
	  filters are pluggable
          Can perform preprocessing task & postprocessing tasks

  Filter API :
                Filter : interface
			
                         init() :  initialize filter
                         doFilter() : invoke other resource (servlet / filter)
                         destroy() : when filter is taken out

                  
		FilterChain  :   It forward the request to next resource
                
		FilterConfig :   To access the filter configuration info from web.xml



    Creation of filter :
                        class MyFilter implements Filter   // Filter is MyFilter

    web.xml (Configuration of filter)



    Listeners :    
                ServletContextListener : interface
                methods :       contextInitialized() : At the time of deployment of the project this method is called

                                contextDestroyed()

    Creation of Listener class :


               class MyListener implements ServletContextListener    //// Listener class : MyListener 


   JSP (Java Server Pages)

			Jsp is a Web Technology to create dynamic web pages

			JSP API

		        JSP Page = HTML + Java code

                        JSP is a servlet

                        Used to seperate the view logic & business logic


			JSP is easy to maintain
 
			In JSP we can create objects of any class


  JSP LifeCycle  
			Hello.jsp (extension of JSP file)

              Step-1 Translation of Hello.jsp to Servlet class
	      Step-2 Compilation of servlet class (Hello_jsp.java)	
	      Step-3 ClassLoading Hello_jsp.class
	      Step-4 Instantiation of Hello_jsp.class
	      Step-5 Initialization of Hello_jsp  (_jspinit())
	      Step-6 Requst Processing  (_jspservice())
	      Step-7 Destroy  (_jspdestroy())

  
  JSP tags :
	    1) JSP Declaration      <%! Declarations   %>   ,,,, <%!  int x=20;  %> , Declaration of methods ,variables

	    2) JSP Scriptlet        <%  Java code  %>       ,,,, <%  Employee e=new Employee(); %>   , Java code can be written

	    3) JSP Expression       <%= Expression %>       ,,,, <%= 10+5 %> , Display result of expression


  JSP Comments : 

           <%--  JSP Comment %>

           <!--  Html Comment -->

  
  Directives : Messages to the JSP container

           <% @    %>

            1) Page Directive     : <%@ page attribute='value' %>   ,,,,, import , errorPage , isErrorPage
	    2) Include            : Include a file into another file   <%@ include attribute %>
	    3) Taglib

  Communication between Html & JSP


  Communication between JSP & servlets

  JSP Implicit objects 
  	                 out, request ,response ,config, application, session.....
  

  Mapping of JSP file in web.xml  , <jsp-file>


  Jsp Form Handling through Servlet



  Exception Handling in 3 ways
  
  1) Using page directive
  
  2) Exception Handling using web.xml    <error-page>

  3) Using try...catch block

  

  Expression Language

  Bean class : constructors, setter and getter and variables ,class should be serialazable.

  Creation of object of the bean class in JSP
 
                          <jsp:usebean  id="object"  class="classname" >   // Action tag

                          <jsp:getProperty>
                          <jsp:setProperty>
                          <jsp:forward>



























