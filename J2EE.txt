
Servlet : Servlet API (javax.servlet)
          Servlet is a Java Program which runs on the server used to
          create dynamic web pages.
          Servlet is a technology

Web container : Contains the Web Applications 

Web Server : Tomcat, Jetty, Glassfish

Web Client : Firefox, Chrome, Opera

Creation of Servlet : 1) On extending HttpServlet class
		      2) On extending GenericServlet class (implements Servlet, ServletConfig, Serializable) 

 GenericServlet class is superclass for HttpServlet
		

Servlet Lifecycle : 1) Loading the servlet
                    2) Creation of servlet instance
                    3) Initialization on calling init()
                    4) Invoking the service()
                    5) Invoke the destroy method

URL Pattern : 
            Change URL in @WebServlet annotaion

Servlet Mapping:

                Servlet can be mapped with a URL in web.xml (Deployment descriptor)

                Single servlet can be mapped with different URLs

                FirstServlet : servlet

    URL 1 :  /FirstServlet 

    URL 2 :  /FirstServlet/Welcome

    URL 3 :  /FirstServlet/Hello


Get Parameter values from URL in the servlet :

                                              getParameter() : used to get parameter value from URL, use it with request object

                  
Query String : 
                ?firstname=Rohit&lastname=Dhavan 
             

<Welcome-File-Tag> of XML file :
                                THe file written in this tag will be displayed first in the browser


 ServletConfig : interface
                         Its object is used to access the servlet configuration information from web.xml
                         

               methods :  getInitParameter() : To access one parameter at a time
                          getInitParameterNames() : Multiple parameters can be accessed
                          getServletName()
                          getServletConfig()


			   <Init-param> 
				<param-name></param-name>
				<param-value></param-value>
			   <Init-param> 
	

 ServletContext : interface
			used to share confinfiguration information about an Application for all servlets                 

		  methods : getInitParameter() : To access one parameter at a time
                            getInitParameterNames() : Multiple parameters can be accessed
                    	    setAttribute()   : Sets the object
		            getAttribute()   : retrieve object
		            removeAttribute(): removes object

                             
 Attributes in Servlet :
                             
 
 HttpServletRequst :              

			getParameter() : At a time one value can be retrieved
			getParameterValues() : At a time multiple values can be retrieved from URL 


 Creation of Form in Html & send data from the HTML form to database

 
 RequestDispatcher : interface

			Used to dispatch the request from one resource(servlet/jsp) to another resource.
			Used to include the content of one resource into another resource

 methods :  forward(request,responce) 
			forwards the request within the same application
			works on server side

	    include(request,response)

 
 HttpServletResponse
            method:  sendRedirect()
            	Redirect the response to another resource
            	Accepts URL as a parameter
                redirect the response from your application to another application
		works on clint side



  Filter :interface 
          Does filtering task like validation
          Apply on Servlets
          One servlet can have multiple filters
	  filters are independent
	  filters are pluggable
          Can perform preprocessing task & postprocessing tasks

  Filter API :
                Filter : interface
			
                         init() :  initialize filter
                         doFilter() : invoke other resource (servlet / filter)
                         destroy() : when filter is taken out

                  
		FilterChain  :   It forward the request to next resource
                
		FilterConfig :   To access the filter configuration info from web.xml



    Creation of filter :
                        class MyFilter implements Filter   // Filter is MyFilter

    web.xml (Configuration of filter)



    Listeners :    
                ServletContextListener : interface
                methods :       contextInitialized() : At the time of deployment of the project this method is called

                                contextDestroyed()

    Creation of Listener class :


               class MyListener implements ServletContextListener    //// Listener class : MyListener 


   JSP (Java Server Pages)

			Jsp is a Web Technology to create dynamic web pages

			JSP API

		        JSP Page = HTML + Java code

                        JSP is a servlet

                        Used to seperate the view logic & business logic


			JSP is easy to maintain
 
			In JSP we can create objects of any class


  JSP LifeCycle  
			Hello.jsp (extension of JSP file)

              Step-1 Translation of Hello.jsp to Servlet class
	      Step-2 Compilation of servlet class (Hello_jsp.java)	
	      Step-3 ClassLoading Hello_jsp.class
	      Step-4 Instantiation of Hello_jsp.class
	      Step-5 Initialization of Hello_jsp  (_jspinit())
	      Step-6 Requst Processing  (_jspservice())
	      Step-7 Destroy  (_jspdestroy())

  
  JSP tags :
	    1) JSP Declaration      <%! Declarations   %>   ,,,, <%!  int x=20;  %> , Declaration of methods ,variables

	    2) JSP Scriptlet        <%  Java code  %>       ,,,, <%  Employee e=new Employee(); %>   , Java code can be written

	    3) JSP Expression       <%= Expression %>       ,,,, <%= 10+5 %> , Display result of expression


  JSP Comments : 

           <%--  JSP Comment %>

           <!--  Html Comment -->

  
  Directives : Messages to the JSP container

           <% @    %>

            1) Page Directive     : <%@ page attribute='value' %>   ,,,,, import , errorPage , isErrorPage
	    2) Include            : Include a file into another file   <%@ include attribute %>
	    3) Taglib             : Include JSTL library in the page   <%@ taglib attribute %>

  Communication between Html & JSP


  Communication between JSP & servlets

  JSP Implicit objects 
  	                 out, request ,response ,config, application, session.....
  

  Mapping of JSP file in web.xml  , <jsp-file>


  Jsp Form Handling through Servlet



  Exception Handling in 3 ways
  
  1) Using page directive
  
  2) Exception Handling using web.xml    <error-page>

  3) Using try...catch block

  

  Expression Language

  Bean class : constructors, setter and getter and variables ,class should be serialazable.

  Creation of object of the bean class in JSP
 
                          <jsp:usebean  id="object"  class="classname" >   // Action tag

                          <jsp:getProperty>
                          <jsp:setProperty>
                          <jsp:forward>
		          <jsp:include>


 MVC in JSP (Model,View,Controller)

 Model : Bean class which interact with data

 Controller : Servlet which handles the request and forwards the request to model or view  

 View  : Web Page which displays the information to the user

=========================================================================================

 i18n (Internationalization) :

  Multiple language support 


 JSTL  (JSP Standard Tag Library)

                   More Tags which makes it easy to devlop
                   Faster devlopment
                   Code reusability
                   Removes the use of scriptlet tag

 JSTL Tags

            1) Core Tags
            2) Function Tags
	    3) Formatting tags
	    4) XML Tag
            5) SQL Tag

   Q.1 Create a JSP Page and forward the request from the page to outside application. (Nilesh)

   Q.2 Create a servlet which is run using URL and display the parameter value which is passed as a name (vishal)

   Q.3 Write a configuration of a parameter in xml file and display the parameter value in the servlet (Hemant)

   Q.4 Create a JSP Page which sets the attribute value and sends the value in other page which gets value and display it. (Nimesh)

   Q.5 Create a bean class which calculates the cube of the passed no from the web page and display the square on the JSP Page. (Abhishek) 

   Q.6 Create two servlets ,servlet1 & servlet2 .servlet1 will be called first when you run project.
       Servlet1 takes username, password from user. When you click on submit button then Servlet2 will display message "Welcome username". 
   
   Q.7 Create two servlets and Run the first Servlet file and set the employee object as an attribute in the first servlet and display the values of employee object
       in the second servlet.    
  


=======================================================================================================================


 Session Management
       
  Session : Specific time interval between client and server
  Session Tracking : Mechanism To identify user / client request


  Session Tracking techniques : 
                              1) Hidden Form field    (type is hidden)  // Form submission is must
			      2) URL Rewriting                          // Use of hyperlink is must
                              3) Cookies             File maintained on client side / browser by the server  

					Class : Cookie 
					Constructor : Cookie()
						      Cookie(String name,String value);
                                        
					Method :      setMaxAge(int) : sets maximum age of cookie in seconds

						      getName() : returns the name of cookie
						      getValue() : returns value of Cookie
 
					
		              4) Session
                                         HttpSession : interface
                                                   

                                    HttpServletRequest            getSession() : return current session or creates a session
                                                                             : returns session object

 
  ===========================================================================================================================

   JSP Tags :

  1) JSP Predefined tags :   Scriptlet elements ,  Action Tags(Standard tags) , Directives 
            
  2) JSP Custom Tag :  User defined tags


=============================================================================================================================

   Resource Bundle  : class
 
                Use : TO support Multiple languages in an Application
                      To remove hardcoding from the application
                      will work on properties configuration file
       
	      1) Create Properties file (.properties) combination of key=value pair
	      2) access property file using ResourceBundle class
                                    method :  getBundle(Path of property file)
	

============================================================================================================================

Java Tools


1)   Maven : It is a repository tool to manage dependencies (jar files)

   Creating a Maven Project ?

   jar file : (.jar) ---- > Java Archive   (library : collection of classes)

   JSTL library : jstl 1.2 .jar

   Type of Maven Project :
                          1) Standalone project
                          2) Web Application

   Advantage : Maven will automatically manage all the building tasks of the jars(dependancies) in your project.

   pom.xml : Project object model ----> Configuration details about a project

   Add dependencies in pom.xml file

=========================================================================================================================

2)   Log4j : logging tool to manage the log information about the project

     log4j.properties file 


    Priority Method 

                        Debug   : successful messages
			Info    : some information reaalted 
			Warn    : warning messages
			Error   : Exception ,messages
			Fatal   : Error 


log4j.rootLogger=INFO,myout

log4j.appender.myout=org.apache.log4j.ConsoleAppender
log4j.appender.myout.Target=System.out
log4j.appender.myout.layout=org.apache.log4j.SimpleLayout
log4j.appender.myout.layout.ConversionPattern=%m


=========================================================================================================================


  Business Object                :   DAO class (Data Access Object) / service class
  Transfer Object / Value Object :   DTO class (Data Transfer Object) / Entity class / POJO class














