1.

package BasicPrograms;

public class pro1 {
	public static void main(String[] args) {
		int x=20;
		int y=30;
		
		System.out.println("Welcome to Java");
		
		System.out.println(x+y);   // + is used to add

		System.out.println("Hello "+x);  // + is concatenate two strings
		
		System.out.println("Welcome to Java"+x+y);

		System.out.println(x+y+"Welcome to Java");
		
		System.out.println(x+""+y);
		
		System.out.println("Welcome to Java"+(x+y));
		
		System.err.println("Error");

	}
}

============================================================

2.

package BasicPrograms;

public class pro2 {

	public static void main(String[] args) {
		byte b=(byte)130;  // -128 to 127 (130)
		short s=32767;  // -32768 to 32767
		int i=400000;
		long l=9945637544L;
		
		System.out.println("Byte : "+b);
		System.out.println("Short : "+s);
		System.out.println("Integer : "+i);
		System.out.println("Long : "+l);

		float f=(float)1.2123452525234;
		System.out.println("Float : "+f);
		
		double d=1.21234525252345623;
		System.out.println("Double : "+d);
		
		f=(float)231425.2123452525;
		System.out.println("Float : "+f);
		
		char ch='G';
		System.out.println("Character : "+ch);

		boolean bl= 1>2;
		System.out.println("Boolean : "+bl);
		
		//Integer in=2;
		int v1;
		short v2=120;
		
		v1=v2;  // Implicit type casting
		System.out.println(v1);
		
		v2=(short)v1;  // Explicit type casting
		System.out.println(v2);
		
		
	}

}
=================================================================

3.

package BasicPrograms;

class myclass1
{
	int x;
	
	void show()
	{
		x=500;
		System.out.println("X : "+x);
	}
}

public class pro3 {

	public static void main(String[] args) {
		myclass1 s1=new myclass1(); //s1 is object
		myclass1 s2=new myclass1(); //s2 is object
		
		s1.show();    // Accessing of member method show()
		s2.show();
		
		s1.x=20;
		System.out.println("s1.x : "+s1.x);
		
		s2.x=30;
		System.out.println("s2.x : "+s2.x);
		
		System.out.println(s1+" "+s2);
		
		
	}
}
===============================================================

4.

package BasicPrograms;

public class pro4 {

	private int x;            // x is instance variable
	private static int y=30;  // static variable
	
	public void display()
	{
		int localvar=56;      // local variable
		
		System.out.println("Instance variable : "+x);
		System.out.println("Static variable : "+y);
		System.out.println("Local variable : "+localvar);
	}
	
	public static void main(String[] args) {
		pro4 obj=new pro4();   //creation of object , obj
		obj.x=1000;            // obj.x
		obj.display();
		
		pro4 obj1=new pro4();   //creation of object , obj
		obj1.x=2000;           // obj1.x
		obj1.display();
		
		System.out.println(obj.x+" "+obj1.x);
		// System.out.println(localvar); 
	}

}
===========================================================

5.

package BasicPrograms;

public class pro5 {

	  static String city;       // static variable
	  //String city;            // Instance variable
	  
	public void getCity()
	{
		city="Pune";
	}
	
	public void showCity()
	{
		System.out.println("City : "+city);
	}
	
	public static void main(String[] args) {
		pro5 p1=new pro5();      
		pro5 p2=new pro5();
		pro5 p3=new pro5();   // p1,p2,p3 are objects
		pro5 p4=new pro5();              // p4 is object
		
		//p2.getCity();
		
		p1.city="Pune";
		p3.city="Bengaluru";
		p2.city="Delhi";
		
		p1.showCity();
		p2.showCity();
		p3.showCity();
		p4.showCity();
		
	}

}

====================================================

6.

package BasicPrograms;

public class pro6 {

	static String city;       // static variable
	String name;              // Instance variable
	
	public static void setCity()
	{
		city="Mumbai";
	}
	
	public void setDetails(String n)
	{
		name=n;
	}
	
	public void showDetails()
	{
		System.out.println("Name : "+name+" City : "+city);
	}
	
	public static void main(String[] args) {
		pro6 c1=new pro6();
		pro6 c2=new pro6();
		pro6 c3=new pro6();
		pro6 c4=new pro6();
		pro6 c5=new pro6();
		
		setCity();
		
		c1.setDetails("Sachin");
		c2.setDetails("Rohit");
		c3.setDetails("Virat");
		c4.setDetails("Ajay");
		c5.setDetails("Rahul");
		
		c1.showDetails();
		c2.showDetails();
		c3.showDetails();
		c4.showDetails();
		c5.showDetails();
		
	}
}

===================================================
7.

package BasicPrograms;

class Calculations
{
	private double number1,number2,result;
	
	public void getResults(double n1,double n2)
	{
		number1=n1;
		number2=n2;
		
		getNumbers();
		
		result=n1+n2;
		System.out.println("Addition       : "+result);
		
		result=n1-n2;
		System.out.println("Subtraction    : "+result);
		
		result=n1*n2;
		System.out.println("Multiplication : "+result);
		
		result=n1/n2;
		System.out.println("Division       : "+result);
		
		result=n1%n2;
		System.out.println("Remainder      : "+result);
		
		System.out.println(Math.pow(4, 3));
	}
	
	void getNumbers()
	{
		
		System.out.println("Number1 : "+number1+" Number2 : "+number2);
	}
}

public class pro7 {
	public static void main(String[] args) {
		Calculations c1=new Calculations();
		
		c1.getResults(40,5);
		
		System.out.println("-------------------------------");
		c1.getResults(50,2);
		
		System.out.println("-------------------------------");
		c1.getResults(60,5);
		
		System.out.println("-------------------------------");
		c1.getResults(1,-2);
	}
}

=========================================================

8.

package BasicPrograms;

class myclass2
{
	public static int getSquare(int n)   // Static method
	{
		return n*n;
	}
	
	public void message()   // Non static method
	{
		System.out.println("Message generated...");
	}
}

public class pro8 {
	public static void main(String[] args) {
		System.out.println("Square is : "+myclass2.getSquare(20));

		myclass2 obj=new myclass2();
		
		obj.message();
	}
}

=========================================

9.

package BasicPrograms;

class myclass3
{
	private int x;   // Private member can not be accessed outside the class directly
	                 // private member can be accessed indirectly through the function of the same class
	protected int y;
	public int z;    // public member can be accessed directly from outside the class
	
	public void fun()
	{
		x=10;
		y=20;
		z=30;
	}
	
	public void show()
	{
		System.out.println("x : "+x);
	}
}

public class pro9 {

	public static void main(String[] args) {
		myclass3 s1=new myclass3();   // Creation of object s1
		
		s1.fun();                     // method calling
		
		//System.out.println("s1.x : "+s1.x);
		System.out.println("s1.y : "+s1.y);     // Accessing of data members / instance variables
		System.out.println("s1.z : "+s1.z);
	
		s1.show();
	}

}

========================================================================

10

package BasicPrograms;

public class pro10 {

	private String name;
	private double per;
	
	public void getDetails(String name,double per)
	{
		this.name=name;
		this.per=per;
	}
	
	public void showDetails()
	{
		System.out.println("Name : "+name);
		System.out.println("Percentage : "+per);
	}
	
	public static void main(String[] args) {
		pro10 p=new pro10();
		
		p.getDetails("Amit",85.6);
		p.showDetails();
	}

}

==========================================================================

11

package BasicPrograms;

public class pro11 {

	int x;
	float f;
	double d;
	char c;
	String s;
	public static void main(String[] args) {
		pro11 p=new pro11();
		
		System.out.println("x : "+p.x);
		System.out.println("f : "+p.f);
		System.out.println("d : "+p.d);
		System.out.println("c : "+p.c);
		System.out.println("s : "+p.s);
		
	}

}

=================================================================================

12

package package1;

public class Demo1 {
	private int x;    // Private Access
	protected int y;  // Protected Access
	public int z;     // Public Access
	int def=2000;     // Default Access
	
	public void initialize()
	{
		x=100;
		y=200;
		z=300;
	}
}


package package1;

public class DefaultAccess {

	public static void main(String[] args) {
		Demo1 d=new Demo1();
		
		System.out.println(d.def);

	}

}


package BasicPrograms;

import package1.Demo1;

public class Demo2 {

	public double z;
	protected int w=500;
	public static void main(String[] args) {
		// package1.Demo1 s1=new package1.Demo1();
		
		Demo1 s1=new Demo1();
		Demo2 s2=new Demo2();
		
		s1.initialize();    // x=100,y=200,z=300 , x : private, y :protected, z:public
		
		// System.out.println("s1.x : "+s1.x); // Not accessible 
		// System.out.println("s1.x : "+s1.y);
		System.out.println("s1.z : "+s1.z);    // Accessible
		
		System.out.println("s2.z : "+s2.z);
		
		//System.out.println(s1.def);  // def is declared with default access, can not be accessed 
		                                // in different package
	}

}

==============================================================================================================


13.

package BasicPrograms;


class Employee
{
	private int eid;
	private String name;
	private double salary;
	private String company;
	
	// Constructor Overloading
	public Employee()     // Default Constructor
	{
		company="HP";
	}
	                               // obj =e2
	public Employee(Employee obj)  // Parameterised constructor copying the company of one object into other object
	{
		company=obj.company;       // e4.company = e2.company
	}
	
	void setCompany(String com)
	{
		company=com;
	}
	
	void setData(int eid,String name,double salary)
	{
		this.eid=eid;
		this.name=name;
		this.salary=salary;
	}
	
	void showData(Address obj)        // Accepting the object as a parameter
	{
		System.out.println("Eid : "+eid);
		System.out.println("Name : "+name);
		System.out.println("Salary : "+salary);
		System.out.println("Company : "+company);
		System.out.println("Address : "+obj.officeno+obj.area+obj.city+obj.state);
		
		System.out.println("========================================");
	}
}

class Address
{
	int officeno;
	String area;
	String city,state;
	public Address(int officeno,String area,String city,String state)   // Parameterised constructor
	{
		this.officeno=officeno;
		this.area=area;
		this.city=city;
		this.state=state;
	}
}

public class pro12 {

	public pro12()    // Default Constructor
	{
		System.out.println("===============Employee Details================");
	}
	
	public static void main(String[] args) {
		
		pro12 p=new pro12();
	
		Employee e1=new Employee();    // Default constructor is called
		Employee e2=new Employee();
		Employee e3=new Employee();
		
		Address add=new Address(511, ", Yerwada ", ", Pune", ",Maharashtra");  // Parameterised Constructor is called

		Address addSamsung=new Address(401, ", MG Road ", ", Pune", ",Maharashtra");  // Parameterised Constructor is called

		e1.setData(101,"John", 20000);
		e2.setData(102,"Miller", 40000);
		e3.setData(103,"Sachin", 50000);
		
		
		e1.showData(add);      // Passing the object to the method
		e2.showData(add);
		e3.showData(add);
		
		System.out.println("==================Updated Details of Employees=======================");
		e2.setCompany("Samsung");
		
		Employee e4=new Employee(e2);   //Passing Object to the constructor
		
		e4.setData(104, "Vijay", 60000);
		
		e1.showData(add);
		e2.showData(addSamsung);
		e3.showData(add);
		e4.showData(addSamsung);
				
	}

}

====================================================================================================

14.

package BasicPrograms;

public class pro13 {

	private final int x=10;  //x can not be changed due to final 
	private final String str="abc";
	
	public String getName()
	{
		return str;
	}
	
	public void changeIt()
	{
		int z=x+200;
		System.out.println(z);
		
		// x=x+1;
		
		// str="def";
	}
	
	public void show(final int c)
	{
		final int y=c;
		System.out.println(c);
	}
	
	public static void main(String[] args) {
		pro13 p=new pro13();
		p.changeIt();
        System.out.println(p.x);
		p.show(20);
		
		System.out.println(p.getName());
	}

}

=====================================================================================

15

package BasicPrograms;

public class pro14 {
	public static void main(String[] args) {
		String s1="Hello World";        // String Literal	
		String s2=new String("Welcome");  // String creation using new 
	
		String s3="Welcome";
		String s4="HELLO";
		
		System.out.println(s1.charAt(6));  // Returns character at specified index
		System.out.println(s1.toUpperCase());  // converts string in upper case
		System.out.println(s4.toLowerCase());  // converts string in lower case
		System.out.println(s1.length());   // length of the string
		System.out.println(s1.startsWith("He"));  // return true or false if the string starts with a specified letter / string
		System.out.println(s1.endsWith("d"));   // return true or false if the string ends with a specified letter / string
		System.out.println(s1.substring(0,5));  // returns substring , 0 is inclusive starting index, 5 is exclusive index
		System.out.println(s1.concat(s3));    // concatenate string values
		System.out.println(s1);
		s1="";    // empty string
		System.out.println(s1.isEmpty());   // returns true if string is empty
		System.out.println(s2.lastIndexOf("e"));
		System.out.println(s2.contains("Wel"));
		System.out.println(s2.replace('W', 'E'));
		System.out.println(s2.replace("come", "abc"));
	}

}

=======================================================================================================

16

package BasicPrograms;

import java.util.Scanner;

public class pro15 {

	public void selectChoice(String choice)
	{
		switch (choice) {
		case "1":
			System.out.println("Selected option 1");
			break;
		case "2":
			System.out.println("Selected option 2"); 
			break;
		case "3":
			System.out.println("Selected option 3"); 
			break;
			
		default:
			System.out.println("Invalid choice");
			break;
		}
	}
	
	public void check(int x,int y)     // User defined function, x=num1, y=num2
	{
		if(x<y)
		{
			System.out.println(x+" is less than "+y);
			System.out.println("====================== ");
		}
		else if(x>y)
			System.out.println(y+" is less than "+x);
		else
			System.out.println(x+" = "+y);
		
	}
	
	public String getString()     // Method getString returning a string value which is entered by user
	{
		Scanner s=new Scanner(System.in);
		System.out.println("Enter a string : ");
		//String str=s.next();
		String str=s.nextLine();    // nextLine() reads a complete string including spaces
		//System.out.println("String is : "+str);
		return str;
	}
	
	public void show(int x)
	{
		int y;
		
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter y : ");
		y=sc.nextInt();
		// Nested if
		if(x==10)   // == equality operator
		{
			System.out.println("Welcome ");
			if(y%2==0)   // % returns a remainder 10 % 2 =>>>>  0 
			{
				System.out.println("Even no");
			}
			else
			{
				System.out.println("Odd no");
			}
		}
		else
		{
			System.out.println(x+" is not equal to 10");
		}
	}
	
	public static void main(String[] args) {
		pro15 p;    // reference variable
		p=new pro15();  // Object
		
		/*
		Scanner s= new Scanner(System.in);
		
		int num1,num2;
		System.out.println("Enter first number : ");
		num1=s.nextInt();    // reading the integer value from user and assigns the value to num1 = 5
		
		System.out.println("Enter second number : ");
		num2=s.nextInt();    // reading the integer value from user and assigns the value to num2 = 6
		
		p.check(num1, num2);     // p.check(5,6);
		
		p.show(10);
		
		p.selectChoice("3");
	
	    */
		System.out.println("String Demo");
		String st=p.getString();
		System.out.println("Entered string is : "+st);
		//s.close();
	}

}

===================================================================================

17

package BasicPrograms;

import java.util.Scanner;

class Product
{     
	private int product_ID;       // Identifier (product_ID) identifies the purpose of defining variable 
	private String product_Name;
	private double product_cost;
	private final int manufacture_year;   // blank final variable
	private static String brand_Name;
	private Scanner s;
	
	public Product()
	{
		manufacture_year=2000;
		brand_Name="Samsung";
		s=new Scanner(System.in);
	}
	
	public void changeCost()
	{
		double increased_value;
		System.out.println("Enter increased value of product : ");
		increased_value=s.nextDouble();
		product_cost=product_cost+increased_value;
	}
	
	
	public void getDetails()
	{
		System.out.println("Enter Product ID :");
		product_ID=s.nextInt();
		
		s.nextLine();                // use it as flushing buffer
		System.out.println("Enter Product Name :");
		product_Name=s.nextLine();
		
		s.nextLine();
		System.out.println("Enter Product Cost :");
		product_cost=s.nextDouble();
		
		s.nextLine();
	}
	
	public void showDetails()
	{
		System.out.println("Product Id : "+product_ID);
		System.out.println("Product Name : "+product_Name.toUpperCase());
		System.out.println("Product Year of Manufacture : "+manufacture_year);
		System.out.println("Product Brand : "+brand_Name.toUpperCase());
		System.out.println("Product Cost : "+product_cost);
	}
	
}

public class pro16 {

	public static void main(String[] args) {
		Product p1=new Product();
		p1.getDetails();
		p1.showDetails();
		
		System.out.println("Product Details After updation\n====================================");
		p1.changeCost();
		p1.showDetails();
		
	}

}

==============================================================================

18

package BasicPrograms;

public class pro17 {
	
	public void demoFor()
	{
		for(int i=0;i<10;i++)
		{
			System.out.print(i+" ");
		}
	}
	
	public void demoWhile()
	{
		System.out.println();
		int i=10;
		
		while(i>0)
		{
			System.out.print(i+" ");
			i--;
		}
	}
	
	public void demoDoWhile()
	{
		System.out.println();
		int i=20;
		
		do
		{
			System.out.print("Hello\t");
			i+=10;
		}while(i<=40);
	}
	
	public void demoForEach()
	{
		System.out.println();
		int numbers[]=new int[3];
		numbers[0]=10;
		numbers[1]=20;
		numbers[2]=30;
		//numbers[3]=30;
		
		for(int x : numbers)    // ForEach loop
		{
			System.out.print(x+" , ");
		}
		
		System.out.println();
		for(int j=0;j<3;j++)    // For loop
		{
			System.out.print(numbers[j]+" ");
		}
		
		System.out.println();
		for(int j=0;j<numbers.length;j++)
		{
			System.out.print("Welcome ");
		}
	}
	
	public static void main(String[] args) {
		pro17 ob=new pro17();
		ob.demoFor();
		ob.demoWhile();
		ob.demoDoWhile();
		ob.demoForEach();

	}

}

==========================================================================================

19

package BasicPrograms;

public class pro18 {

	public void avg()
	{
		double sum=0.0,avg;
		int j=0;
		for(int i=1;i<=10;i++)
		{
			sum=sum+i;
			j++;
		}
		avg=sum/j;
		System.out.println("Average : "+avg);
	}
	
	public void demo()
	{
		int x=4;
		for(int i=x;i<20;i++)
		{
			if(i==10)
				//break;
				continue;
			System.out.println(i);
		}
		
		System.out.println("Loop terminated");
		
		for(int i=1;i<=5;i++)        // Outer for loop
		{
			for(int j=5;j>=i;j--)    // Inner for loop
			{
				System.out.print("* ");
			}
			System.out.println();
		}
	}
	
	public static void main(String[] args) {
		
		pro18 p=new pro18();
		p.demo();
		p.avg();
		
		for(;;)
		{
			System.out.println("Hi");
		}
	}

}

===========================================================================

20

package BasicPrograms;

public class pro19 {

	public static void main(String[] args) {
		int x=100;
		
		System.out.println(x++);   // 100
		System.out.println(x);     // 101
		System.out.println(++x);   // 102
		
		// &&, || 
		x=5;
		System.out.println("x : "+x);
		if((10<x)&&(2>++x))
		{
			System.out.println(x);
		}
		System.out.println(x);
		
		x=5;
		System.out.println("x : "+x);
		if((10<x)&(2>++x))
		{
			System.out.println(x);
		}
		System.out.println(x);
		
		x=5;
		int res=x<<2;   // x * 2^2  => 5*4 =20  (Left shift operator)
		
		System.out.println(res);
		
		x=5;
		res=x>>2;        // x / 2^2 => 5/4 =1 (Right shift operator)
		System.out.println(res);
		
		if(x!=5)
		{
			System.out.println("True");
		}
		else
		{
			System.out.println("false");
		}
		
		// Difference between == & equals()
		
		String s1="abc";
		String s2="abc";
		String s3=new String("abc");
		
		if(s1==s2)     // == used to compare two reference variables
			System.out.println("Strings equal");
		else
			System.out.println("Strings not equal");
	
		if(s1==s3)
			System.out.println("Strings equal");
		else
			System.out.println("Strings not equal");
	
		if(s1.equals(s2))  // equals() compares two values of string variable
			System.out.println("Strings equal");
		else
			System.out.println("Strings not equal");
	
		if(s1.equals(s3))
			System.out.println("Strings equal");
		else
			System.out.println("Strings not equal");
		
		String s4="hello";
		String s5="Hello";
		
		if(s4.equalsIgnoreCase(s5))
			System.out.println("Strings equal");
		else
			System.out.println("Strings not equal");
	}

}

============================================================================

21

package BasicPrograms;

import java.util.Scanner;

class Emp
{
	private int age;
	public void getAge(int a)
	{
		age=a;
	}
	
	public void show(int i)
	{
		System.out.println("Age of employee : "+i+" is "+age);
	}
}

public class pro20 {
	public static void main(String[] args) {
	    Emp e[]=new Emp[3]; // Array of objects
	    Scanner s=new Scanner(System.in);
	    
	    int ag;
	    for(int i=0;i<e.length;i++)
	    {
	    	e[i]=new Emp();      // memory allocation for objects
	    	System.out.println("Enter age of employee : "+(i+1));
	    	ag=s.nextInt();
	    	e[i].getAge(ag);
	    }
	    
	    for(int i=0;i<e.length;i++)
	    {
	    	e[i].show(i+1);
	    }
	}

}

========================================================================================================

22

package BasicPrograms;

public class pro21 {

	// method overloading
	public void show()   // show() method is overloaded
	{
		System.out.println("show() method called with no parameter...");
	}
	
	public void show(int a)
	{
		System.out.println("show() method called with single parameter..."+a);
	}
	
	public void show(double a)
	{
		System.out.println("double value..."+a);
	}
	
	public void show(int a,double b)
	{
		System.out.println("show() method called with two parameters..."+a+" , "+b);
	}
	
	public void show(double a,int b)
	{
		System.out.println("show() method called with two parameters..."+b+" , "+a);
	}
	
	public void show(long a,int b)
	{
		System.out.println("show() method called with two parameters..."+b+" , "+a);
	}
	
	public void show(int a,long b,int c)
	{
		System.out.println("show() method called with two parameters..."+b+" , "+a);
	}
	
	public static void main(String[] args) {
		pro21 p=new pro21();
		p.show();
		p.show(20.2);
		p.show(45);
		p.show(2, 3.14);
		p.show(3.14,5);
		// p.show(10, 20); // Ambiguous call to method , Error
	}
}

===================================================================================

23

package BasicPrograms;

// Single inheritance

class Base1
{
	public int x;
	public int function()     // features of parent class
	{
		x=500;
		return x;
	}
}

class Derived1 extends Base1
{
	public void display()      // feature of child class
	{
		System.out.println("Hello");
	}
}

public class pro22 {

	public static void main(String[] args) {
		Derived1 obj=new Derived1();

		System.out.println(obj.function());   // Accessing features of base class
		obj.x=1000;
		System.out.println(obj.x);
		System.out.println(obj.function());
		obj.display();    // Accessing feature of child class
	}
}

=====================================================================

24

package BasicPrograms;

// Multilevel inheritance

class Base2
{
	public int x;
	public int function()     // features of parent class
	{
		x=500;
		return x;
	}
}

class Derived2 extends Base2
{
	public void display()      // feature of child class
	{
		System.out.println("Hello");
	}
}

class Derived3 extends Derived2
{
	public void show()      // feature of child class
	{
		System.out.println("Welcome");
	}
}

public class pro23 {

	public static void main(String[] args) {
		Derived3 obj=new Derived3();

		System.out.println(obj.function());   // Accessing features of base class
		obj.x=1000;
		System.out.println(obj.x);
		System.out.println(obj.function());
		obj.display();    // Accessing feature of child class
		obj.show();
	}
}

==================================================================

25

package BasicPrograms;

// Multilevel inheritance

class Base3
{
	public int x=500;
	public int function()     // features of parent class
	{
		x=500;
		return x;
	}
}

class Derived4 extends Base3
{
	public void display()      // feature of child class
	{
		System.out.println("Hello");
	}
}

class Derived5 extends Base3
{
	public int x=300;
	public void show()      // feature of child class
	{
		x=300;
		System.out.println("Welcome"+x);
	}
}

public class pro24 {

	public static void main(String[] args) {
		Derived4 o1=new Derived4();
		Derived5 o2=new Derived5();

		System.out.println(o1.function());
		o1.display();
		
		System.out.println(o2.function());
		o2.show();
		
		System.out.println(o2.x);
	}
}

======================================================================

26
package BasicPrograms;

class class1
{
	private int x;   // x is not inheritable
	protected int y;
	public int z;
	
	public void f1()
	{
		x=10;
		y=20;
		z=30;
		//System.out.println(x+" "+y+" "+z);
	}
}

class class2 extends class1
{
	private int s;
	protected int t;
	public int u;
	
	public void f2()
	{
		s=40;
		t=50;
		u=60;
		//System.out.println(s+" "+t+" "+u);
	}
}

public class pro25 {

	public static void main(String[] args) {
		class2 obj=new class2();
		
		obj.f1();
		obj.f2();

		//System.out.println("obj.x : "+obj.x);
		System.out.println("obj.y : "+obj.y);
		System.out.println("obj.z : "+obj.z);
		// System.out.println("obj.s : "+obj.s);
		System.out.println("obj.t : "+obj.t);
		System.out.println("obj.u : "+obj.u);
	}

}

==========================================================================

27

package BasicPrograms;

class Parent1
{
	public Parent1(int x,double y) {
		System.out.println("Base constructor called");
		System.out.println("Result : "+(x+y));
	}
}

class Child1 extends Parent1
{
	public Child1()
	{
		super(10,1.3);  //  call the base class constructor
		System.out.println("Hello");
	}
}

class Child2 extends Child1
{
	public Child2()
	{
		super();  //  call the base class constructor
		System.out.println("Welcome");
	}
}
public class pro26 {

	public static void main(String[] args) {
		Child2 obj=new Child2();
	
	}
}

======================================================================

28

package BasicPrograms;

class Person 
{
	String name;
	int rollno;
	
	int collgeid=400;       
	
	public Person(int rollno,String name)
	{
		this.name=name;
		this.rollno=rollno;
	}
	
	public void setCountry()
	{
		System.out.println("India");
	}
}

class Stud extends Person
{
	String city;
	int collgeid=500;
	
	public Stud(String city,int rollno,String name)
	{
		super(rollno,name);
		this.city=city;
	}
	public void showPerson()
	{
		System.out.println("Roll no : "+rollno);
		System.out.println("Name : "+name);
		System.out.println("City : "+city);
		System.out.println(super.collgeid);   // super class instance variable calling
	}
	
	public void setCountry()          // method overriding
	{
		super.setCountry();          // calling super class method
		System.out.println("USA");
		
	}
}

public class pro27 {

	public static void main(String[] args) {
		Stud obj=new Stud("Delhi", 110, "Sunil");
		
		obj.showPerson();
		
		obj.setCountry();
		
		System.out.println(obj.collgeid);
		
	
	}

}

========================================================================

29

package BasicPrograms;

abstract class Bank       // Base class
{
	protected int br_code;
	public void showMessage()    // Non Abstract method
	{
		br_code=101;
		System.out.println("Welcome to Bank :");
	}
	public abstract double getRateOfInterest();     // Abstract Method
}

class IDBI extends Bank
{
	String bank_name;
	@Override
	public double getRateOfInterest() {    // Implementation of Abstract method getRateOfInterest()
		
		return 6.5;
	}
	public void showBankDetails()
	{
		br_code=3045;
		bank_name="IDBI";
		
		System.out.println("Bank Name : "+bank_name);
		System.out.println("Branch Code : "+br_code);
		System.out.println("Rate of Interest : "+getRateOfInterest());
	}
}

class ICICI extends Bank
{
	String bank_name;
	public double getRateOfInterest()
	{
		return 7.5;
	}
	
	public void showBankDetails()
	{
		br_code=4055;
		bank_name="ICICI";
		
		System.out.println("Bank Name : "+bank_name);
		System.out.println("Branch Code : "+br_code);
		System.out.println("Rate of Interest : "+getRateOfInterest());
	}
}

public class pro28 {

	public static void main(String[] args) {
		IDBI s1=new IDBI();
		ICICI s2=new ICICI();
		
		s1.showMessage();
		s1.showBankDetails();
		
		s2.showBankDetails();
		
		Bank ob;

	}

}

=================================================================================

30

package BasicPrograms;

interface myinterface       // Interface Definition
{
	public static double PI=3.14;    // member of interface
	
	public abstract void display();  // Abstract method
}

class myImplementation implements myinterface
{
	@Override
	public void display() {
		System.out.println("Welcome to my method....");
	}	
}

public class pro29 {

	public static void main(String[] args) {
		myImplementation obj=new myImplementation();
		obj.display();

	}

}

==============================================================================

31

package BasicPrograms;

interface inf1
{
	public void fun1();
}

interface inf2 extends inf1   // inf2 extending interface inf1
{
	public void fun2(int x);
}

class cl implements inf2
{
	public void fun2(int x)
	{
		System.out.println(x);
	}
	
	public void fun1()
	{
		System.out.println("Hi");
	}
}


public class pro30 {

	public static void main(String[] args) {
		cl ob=new cl();
		ob.fun1();
		ob.fun2(400);

	}

}

======================================================================

32

package BasicPrograms;

// Achieve Multiple inheritance in Java Using Interface
interface in1
{
	public void f1();
}

interface in2
{
	public void f2();
}

class impl implements in1,in2
{
	@Override
	public void f2() {
		System.out.println("Hi");		
	}

	@Override
	public void f1() {
		System.out.println("Hello");
	}	
}

public class pro31 {

	public static void main(String[] args) {
		impl ob=new impl();
		ob.f1();
		ob.f2();

	}

}

==========================================================================

33

package BasicPrograms;

interface cla1
{
	public void f1();
}

abstract class cla2
{
	public abstract void f1();
}

class cla3 extends cla2 implements cla1
{
	@Override
	public void f1() {
		System.out.println("Welcome");
	}	
}

public class pro32 {

	public static void main(String[] args) {
		cla3 ob=new cla3();
		
		ob.f1();

	}

}

=============================================================

34
package BasicPrograms;

interface I1
{
	public void f1();
}

interface I2
{
	public void f2();
}

abstract class C1
{
	public abstract void f1();
}


class cla4 extends C1 implements I1,I2
{
	@Override
	public void f1() {
		System.out.println("Welcome");
	}

	@Override
	public void f2() {
		System.out.println("f2 implemented");
	}	
}

public class pro33 {

	public static void main(String[] args) {
		cla4 ob=new cla4();
		
		ob.f1();
		ob.f2();

	}

}

=============================================================
35
package BasicPrograms;

interface Int1
{
	public void f3();
}

interface Int2
{
	public void f2();
}

class C11
{
	public void f1() {
		System.out.println("Class method implemented ");
	}
}


class cla5 extends C11 implements Int1,Int2
{
	@Override
	public void f2() {
		System.out.println("f2 implemented");
	}

	@Override
	public void f3() {
		System.out.println("Java");
	}	
}

public class pro34 {

	public static void main(String[] args) {
		cla5 ob=new cla5();
		
		ob.f1();
		ob.f2();
		ob.f3();
	}

}

============================================================

36

package BasicPrograms;

interface intref
{
	public void f1();
}

abstract class absCl implements intref
{
	public abstract void f2();
	public void f3()
	{
		System.out.println("Non abstract method called....");
	}
}

public class pro35 extends absCl{

	@Override
	public void f1() {
		System.out.println("f1 extended from interface");
	}

	@Override
	public void f2() {
		System.out.println("f2 extended from class");
		
	}

	public static void main(String[] args) {
		pro35 ob=new pro35();
		ob.f1();
		ob.f2();
		ob.f3();
	}
}

=================================================================

37
package BasicPrograms;

import java.util.Scanner;

interface Calculator 
{
	public double getResult(double a);
}

//Nilesh
class class_01 implements Calculator 
{

	@Override
	public double getResult(double a) {
		double x;
		x=(a-32)*5/9;	
		return x;
	}
}


// Abhishek

class sum_of_array implements Calculator {

	@Override
	public double getResult(double a) {
		double sum = 0;
		double arr[] = new double[5];
		
		Scanner sy = new Scanner(System.in);
		
		for(int i=0;i<arr.length;i++)
		{
			System.out.println("ENTER ARRAY NUMBER "+(i+1)+" : ");
			arr[i] = sy.nextDouble();				
		}
		
		for(int i=0;i<arr.length;i++)
		{
			sum = sum + arr[i];
		}
	return sum;
   }
	
}

// Josephine
class P1 implements Calculator
{
	public double getResult(double a)
	{
		for(int i=1;i<=50;i++)
		{
			System.out.println("Numbers : "+i);
		}
		return 0;
	}
}

// Nimesh
class sum implements Calculator 
{
    private Scanner s;
    

    public double getResult(double z)
    {
        s=new Scanner(System.in);
      
        int num=0, rem=0, sum=0;
        
        System.out.println("Entre Number :"); 	
        num=s.nextInt();
        while (num > 0) {
        	rem = num%10;
        	sum = sum+rem;
        	num = num/10;
        } 
       return sum;
    }
}


public class pro36 {

	public static void main(String[] args) {
		
		
		//==============================
		
		class_01 nilesh=new class_01();
		double C;
		C=nilesh.getResult(97);
		System.out.println(C+" C");

		//==============================
		
		sum_of_array abhishek = new sum_of_array();
		System.out.println(abhishek.getResult(12));
        
		//==============================
		
		 P1 josephine=new P1 ();
		 josephine.getResult(1.2);

		//==============================

		    sum nimesh=new sum();
	        double z;
	        z=nimesh.getResult(12);
	        System.out.println("Sum is "+z);

	}

}

==============================================================================

38
package BasicPrograms;

class XYZ
{
	// Method Overloading
	public void f1()
	{
		System.out.println("method1");
	}
	public void f1(int a)
	{
		System.out.println("method2");
	}
	
	//==================================
	// show in XYZ is to be overridden in Der class
	public void show()    // Overridden method
	{
		System.out.println("Method show from XYZ class called.....");
	}
}

class Der extends XYZ
{
	public void show()   // Overriding method
	{
		System.out.println("Method show from Der class called.....");
	}
}

public class pro37 {

	public static void main(String[] args) {
		XYZ ob=new XYZ();
		ob.f1();
		ob.f1(30);
		
		//=========================
		
		Der ob1=new Der();
		ob1.show();
	}

}

====================================================================

39
package BasicPrograms;

class Color
{
	public void showColor()
	{
		System.out.println("Black");
	}
}

class Color1 extends Color
{
	public void showColor()
	{
		System.out.println("Red Color");
	}
}

class Color2 extends Color
{
	public void showColor()
	{
		System.out.println("Blue Color");
	}
}

public class pro38 {

	public static void main(String[] args) {
		Color1 c=new Color1();
		c.showColor();
		
		Color2 c1=new Color2();
		c1.showColor();
		
		//=================================
		
		System.out.println("=====================================");
		
		Color ref;  // Base class reference
		Color obj=new Color();
		
		ref=c;   // ref refers to the child class Color1 / Upcasting
		ref.showColor();
		
		ref=c1;  // ref refers to the child class Color2
		ref.showColor();
		
		ref=obj;  // ref refers to the base class Color
		ref.showColor();
		
		
	}

}

==================================================================================

40
package BasicPrograms;

abstract class Colors
{
	public abstract void showColor();
}

class Colors1 extends Colors
{
	public void showColor()
	{
		System.out.println("Red Color");
	}
}

class Colors2 extends Colors
{
	public void showColor()
	{
		System.out.println("Blue Color");
	}
}

public class pro39 {

	public static void main(String[] args) {
		
		Colors ref;  // Base class reference
		
		ref=new Colors1();  // ref refers to the child class(Colors1) object
		ref.showColor();
		
		ref=new Colors2();  // ref refers to the child class(Colors2) object
		ref.showColor();
		
	}

}

============================================================
41
package BasicPrograms;

interface Mobiles
{
	public String name="Samsung";   
	public void getCost(int c);
}

class Mob1 implements Mobiles
{
	@Override
	public void getCost(int c) {
		System.out.println("Brand : "+name+" Model : Galaxy s20 "+" Price : "+c);
	}	
}

class Mob2 implements Mobiles
{
	@Override
	public void getCost(int c) {
		System.out.println("Brand : "+name+" Model : Galaxy s30 "+" Price : "+c);
	}
}
public class pro40 {

	public static void main(String[] args) {
		Mobiles m;
		
		System.out.println("Details of Mobile-1");
		m=new Mob1();
		m.getCost(20000);
		
		System.out.println("Details of Mobile-2");
		m=new Mob2();
		m.getCost(30000);
		
	}

}

==============================================================================

42
package BasicPrograms;

public class pro41 {

	private double sum;
	
	pro41()
	{
		sum=0.0;
	}
	
	public double getAverage(double num[])     // Method definition
	{
		for(int i=0;i<num.length;i++)
		{
			sum=sum+num[i];
		}
		
		return sum/num.length;
	}
	
	public static void main(String[] args) {
		
		double numbers[]= {10,20,30,40,50};

		pro41 ob=new pro41();
		
		System.out.println("Average of Array elements : "+ob.getAverage(numbers));  // Pass an array into method
	}

}

=================================================================================

43
package BasicPrograms;

// POJO (Plain old java object)
class Customer
{
	private int cid;
	private String cname;
	private String city;
	
	public Customer()
	{
		cid=0;
		cname=null;
		city="Mumbai";
	}

	public int getCid() {     // Accessor method
		return cid;
	}

	public void setCid(int cid) {
		this.cid = cid;
	}

	public String getCname() {
		return cname;
	}

	public void setCname(String cname) {
		this.cname = cname;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}
}

public class pro42 {

	public static void main(String[] args) {
		Customer c1=new Customer();
		Customer c2=new Customer();
		Customer c3=new Customer();
		
		c1.setCid(101);
		c1.setCname("Vijay");
		c1.setCity("Pune");
		
		c2.setCid(102);
		c2.setCname("Suresh");
		
		c3.setCid(103);
		c3.setCname("Ajay");
		
		System.out.println("========Details of First Customer===========");
		System.out.println("Customer Id : "+c1.getCid()+" Customer Name : "+c1.getCname()+" City : "+c1.getCity());
		
		System.out.println("========Details of Second Customer===========");
		System.out.println("Customer Id : "+c2.getCid()+" Customer Name : "+c2.getCname()+" City : "+c2.getCity());
		
		System.out.println("========Details of Third Customer===========");
		System.out.println("Customer Id : "+c3.getCid()+" Customer Name : "+c3.getCname()+" City : "+c3.getCity());
	}

}

=================================================================================

44

package BasicPrograms;

public class pro43 {

	public static void main(String[] args) {
		int x=5;
		Integer i=x;     // Auto boxing  , x is primitive, i is non primitive 
		                 // converting the integer value into object
		
		System.out.println(i);
		
		int y=i;  // Auto Unboxing
		System.out.println(y);
		
		int z=i.intValue();  // Unboxing
		System.out.println(z);
		
		///////////////////////////////////
		
		String no="40";
		int s=30;
		int res=Integer.parseInt(no)+s;
		
		System.out.println(res);
		
		String s1="3.14";
		double d=Double.parseDouble(s1)+1.2;
		System.out.println(d);
		
		Double d1=1.34;
		double d2=d1.doubleValue();
		
		char ch='A';
		System.out.println((int)ch);
		
		System.out.println(args[0]);
		
	}
}

================================================================

45

package BasicPrograms;

// Program to accept 4 command line arguments as a numeric value and print their sum
public class pro44 {

	public static void main(String[] args) {
		
		 int result=Integer.parseInt(args[0])+Integer.parseInt(args[1])+Integer.parseInt(args[2])+Integer.parseInt(args[3]);

		 System.out.println(result);

	
	}

}

==============================================================

46

package BasicPrograms;

// Making method final and it can not be overridden in child class
// can not be wriiten specific implementation for this method in child class
class finalDemo
{
	public final void func()   // final method
	{
		System.out.println("Final method definition");
	}
}

class derFinal extends finalDemo
{
	public void func(int x)
	{
		System.out.println(x);
	}
}

public class pro45 {

	public static void main(String[] args) {
		derFinal d=new derFinal();
		d.func();
		d.func(100);
	}

}

=====================================================================

47

package BasicPrograms;

// final class can not be inherited but its functionalities can be called

final class Final1     // final class
{
	public int x=100;
	private static int var;   // static variable
	
	Final1()     // Default constructor
	{
		var=500;
	}
	
	public String getMessage()
	{
		return "Hello";
	}
	
	public static void staticMethod()  // static method can only access static data 
	{
		System.out.println("var : "+var);
		//System.out.println("x :"+x);
	}
}

public class FinalClass {

	public static void main(String[] args) {
		Final1 ob=new Final1();
		System.out.println(ob.getMessage());
		System.out.println("x " +ob.x);
		ob.x++;
		System.out.println("x "+ob.x);
		
		Final1.staticMethod();   // static method can be called using Class name
	}

}

========================================================

48
package BasicPrograms;

public class pro46 {
	public static void main(String[] args) {
		
		StringBuffer sb=new StringBuffer("World");
		System.out.println(sb);     // sb="world"
		sb.append("Java");          // sb="worldJava", append() adds a string value in the original stringbuffer object
		System.out.println(sb);
		
		String s1=new String("Welcome");   // s1="Welcome"
		System.out.println(s1);
		System.out.println(s1.concat("Java"));  // WelcomeJava
		System.out.println(s1);            // s1="Welcome"
		
		
		String s2="India";
		StringBuffer sb1=new StringBuffer(s2);  // Converting from String object to StringBuffer object 
		
		System.out.println(sb1);
		sb1.append("Programming");
		System.out.println(sb1);
		
		sb1.reverse();               // reverse a string 
		System.out.println(sb1);
		
		System.out.println(sb1);
		
		StringBuffer sb2=new StringBuffer("JAVA PROGRAMMING");
		System.out.println(sb2);
		sb2.replace(0, 4, "PHP".toLowerCase());
		System.out.println(sb2);
		
		System.out.println(sb2.charAt(0));
		
		System.out.println(sb2.substring(0, 3));
		
		System.out.println("HTML".startsWith("H"));
		
		String str=sb2.toString();   // Conversion from StringBuffer Object to String object
		
		System.out.println(str.startsWith("p"));
		
		System.out.println(sb2);
		sb2.delete(0, 4);
		
		System.out.println(sb2);
		sb2.insert(0, "JavaScript ");
		System.out.println(sb2);
		
		StringBuilder sbb=new StringBuilder("Text");
		sbb.reverse();
		System.out.println(sbb);
	}
}

======================================================================

49
package BasicPrograms;

import java.util.Scanner;

final class Employees              // Immutable class Employees
{                                  // 1) Class is final
                                   // 2) All member variables must be final
	final String PAN_Card;         // 3) Setters methods not allowed  
	
	public Employees(String pc)
	{
		PAN_Card=pc;
	}
}

class EmpDetails
{
	String name;
	Scanner s;
	Employees e;
	
	public EmpDetails(String pc) {
		s=new Scanner(System.in);
		e=new Employees(pc);
	}
	
	void getName()
	{
		System.out.println("Enter employee name : ");
		name=s.nextLine();
	}
		
	void showDetails()
	{
		System.out.println("Name : "+name+" PAN Card No : "+e.PAN_Card);
	}
}

public class pro47 {

	public static void main(String[] args) {
		EmpDetails e1=new EmpDetails("AN23F43");
		EmpDetails e2=new EmpDetails("AG21F43");
		e1.getName();
		e2.getName();
		
		e1.showDetails();
		e2.showDetails();
	}
}

========================================================
50
package BasicPrograms;

// Overriding toString() of Object class
class Students
{
	private int rollno;
	private String name;
	
	public Students(int rollno, String name) {
		this.rollno = rollno;
		this.name = name;
	}
	
	public String toString()
	{
		return rollno+" =====> "+name.toUpperCase();
	}
}

public class pro48 {

	public static void main(String[] args) {
		Students s1=new Students(101,"Sumit");
		System.out.println(s1.toString());      // toString() returns the String representation of the object
		
		Students s2=new Students(102,"Sunil");
		System.out.println(s2);
		
		System.out.println(s1.hashCode());
		System.out.println(s2.hashCode());
	}

}

=================================================================

51
package BasicPrograms;

public class pro49 {

	
	public static void main(String[] args) {
		int x=20,z=0;
		
		try
		{
			z=x/2;     // Raising the exception
			System.out.println("Z : "+z);
		}
		catch(Exception e)
		{
			System.out.println("Can not divide by zero");
		}
		
		System.out.println(z);
		System.out.println("End of program");

	}

}

=================================================================

52
package BasicPrograms;

public class pro50 {

	public static void main(String[] args) {
		////////////////////////////////////////////////////
		
		try 
		{
			int x[]=new int[2];
			
			x[1]=30;
			System.out.println(x[1]);
		} 
		catch (Exception e) 
		{
			System.out.println(e);
			e.printStackTrace();         // will return complete information about exception
			System.out.println("Array Index out of range");
		}
		////////////////////////////////////////////////////
		
		try 
		{
			int x[]=new int[2];
			x[1]=30;
			System.out.println(x[1]);
		} 
		finally 
		{
			System.out.println("In finally block");
		}
		
		///////////////////////////////////////////////////
		
		String str=null;
		try 
		{
            str=null;
			System.out.println(str.length());
		}
		catch (Exception e) 
		{
			str="Welcome";
			System.out.println("String is NULL");
		}
		finally 
		{
			System.out.println(str.length());
			System.out.println("Finally Block executed");
		}
			
		
	}

}

=====================================================================
53

package BasicPrograms;

public class pro51 {
	
	public void getNum(int no)    // Method is handling the exception
	{	
		int z=0;
		try 
		{
			z=10/no;
		} 
		catch (Exception e) 
		{
			z=10;
			System.err.print("Result on dividing number by 1, no passed is zero : ");
			System.out.println("Z : "+z);
		}
		
		System.out.println("Z : "+z);
	}
	
	
	public static void main(String[] args) {
		pro51 ob=new pro51();
		
		ob.getNum(2);
	}
}

=========================================================================

54

package BasicPrograms;

import java.util.Scanner;

public class pro52 {

	Scanner s;
	String name;
	
	public pro52() 
	{
		s=new Scanner(System.in);
	}
	
	public void getName()
	{
		char choice;
		while(true)
		{
			
		System.out.println("Enter name : ");
		name=s.nextLine();
		
		if(name.equals(""))
			name=null;
		
		try 
		{
			System.out.println(name.length());
		} 
		catch (Exception e) 
		{
			System.out.println("Name can not be empty");
		}
			System.out.println("Enter choice : ");
			
			try 
			{
				int i=System.in.read();
				
				choice=(char)i;
				if(choice=='N')
					break;
			} catch (Exception e) {
				// TODO: handle exception
			}
			s.nextLine();
		}
		
	}
	
	public static void main(String[] args) {
		pro52 ob=new pro52();
		
		ob.getName();
	}

}

================================================================

55
package BasicPrograms;

import java.io.IOException;

public class pro53 {

	public static void main(String[] args) {
		byte bt[]=new byte[5];
		
		try {
			System.out.println("Enter text :");
			System.in.read(bt);
			
			for(byte b:bt)
			{
				System.out.print((char)b);
			}
		
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}

========================================================================

56
package BasicPrograms;

// Multiple catch blocks
public class pro54 {

	public void func()
	{
		try 
		{
			int x=10/0;
			
			String st="";
			System.out.println(st.length());
			
			int num[]=new int[2];
			
			num[3]=10;
		} 
		
		catch (ArithmeticException e) {
			System.out.println("Arithmetic Exception found");
		}
		catch (NullPointerException e) {
			System.out.println("Null Pointer Exception");
		}
		catch(Exception e)
		{
			System.out.println("Default Exception found");
		}
		
	}
	
	public static void main(String[] args) {
		pro54 ob=new pro54();
		
		ob.func();
		
		System.out.println("In Main method");

	}

}

===============================================================

57

package BasicPrograms;

import java.util.Scanner;

public class pro55 {

	public void func(String no)
	{
		try                           // Outer try
		{
			int z=Integer.parseInt(no);
			
			try                       // Inner Try 
			{
				double res=10/z;
				System.out.println("Division : "+res);
			}   
			catch (ArithmeticException e) {
				System.out.println("Divide by zero error");
			}
		} 
		catch (NumberFormatException e) {
			System.out.println("Alphabets can not be converted in integer");
		}
	}
	
	public static void main(String[] args) {
		Scanner s=new Scanner(System.in);
		
		System.out.println("Enter a String : ");
		String no=s.nextLine();
		
		pro55 ob=new pro55();
		ob.func(no);

	}

}

===============================================================

58

package BasicPrograms;

public class pro56 {

	public void fun(int no)
	{
		int z;
		try 
		{
			z=10/no;
			System.out.println("Z : "+z);
		} 
		catch (ArithmeticException e) {
			System.out.println("Divide by zero");
			
			int num[]=new int[no+2];
			try 
			{
				num[2]=20;
				System.out.println(num[1]);
			} 
			catch (ArrayIndexOutOfBoundsException e2) {
				System.out.println("Array index out of range");
			}
		}
	}
	
	public static void main(String[] args) {
		pro56 ob=new pro56();
		ob.fun(10);
	}

}

=========================================================================================

59
package BasicPrograms;

import java.util.Scanner;

public class pro57 {

	public void fun(int no)
	{
		try 
		{
			if(no%2==0)
				throw new ArithmeticException();   // throwing the exception of type unchecked
			else
			{
				for(int i=0;i<=no;i++)
				{
					System.out.println(i*i);
				}
			}

		} 
		catch (ArithmeticException e) 
		{
			System.err.println("Number should be odd to print Square value");
		}
					
	}
	
	public static void main(String[] args) {
		
		Scanner s=new Scanner(System.in);
		
		System.out.println("Enter a number : ");
		int n=s.nextInt();
		
		pro57 p=new pro57();
		
		p.fun(n);
	}

}

=================================================================

60
package BasicPrograms;

import java.io.FileWriter;
import java.io.IOException;

public class pro58 {

	public void func() throws IOException
	{
		FileWriter f=new FileWriter("abc.txt");
		
	}
	
	public static void main(String[] args) {
		
		pro58 p=new pro58();
		
		try {
			p.func();
		} catch (Exception e) {
			System.out.println("Exception Handled");
		}
		
	}

}

================================================================
61

package BasicPrograms;

import java.io.FileWriter;
import java.io.IOException;

// Exception Propogation
// Handle unchecked exception using throws clause

public class pro59 {

	public void func2() throws NullPointerException,ArithmeticException
	{
		String name=null;
		
		//try 
		//{
			System.out.println(name.length());    // Raising exception
		//} 
		//catch (NullPointerException e) 
		//{
		//	System.out.println("Null Pointer Exception handled by func2");
		//}
		
		
	}
	
	public void func1() throws NullPointerException
	{
		try 
		{
			func2();
		} 
		catch (Exception e) 
		{
			System.out.println("Null Pointer Exception handled by func1");
		}
		
	}
	
	public static void main(String[] args) {
		
		pro59 p=new pro59();
		
		//try 
		//{
			p.func1();
		//} 
		//catch (Exception e) 
		//{
		//	System.out.println("Null Pointer Exception handled by main");
		//}
		
		
	}

}

===========================================================================
62

package BasicPrograms;

import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;

class ba1
{
	public void show() throws Exception 

	{
		System.out.println("Hello");
	}
}

class de1 extends ba1
{
	public void show() throws FileNotFoundException  	{
		System.out.println("Hi");
	}
}

public class pro60 {

	public static void main(String[] args) {
		de1 ob=new de1();
		
		try {
			ob.show();
		} catch (Exception e) {
			// TODO: handle exception
		}

		Scanner s=new Scanner(System.in);
	}

}

=========================================================================
63
package BasicPrograms;

// Custom exception / User defined exception
class InvalidNumberException extends Exception   // InvalidNumberException is User defined exception class 
{
	public InvalidNumberException() {
		System.out.println("Exception : Invalid Number -1");
	}
}

public class pro61 {

	public void getNumber(int num) throws InvalidNumberException
	{
		if(num==-1)
			throw new InvalidNumberException();
		else
			System.out.println("You entered a valid number");
	}
	
	public static void main(String[] args) {
		pro61 p=new pro61();
		
		try 
		{
			p.getNumber(-1);
		} 
		catch (InvalidNumberException e) {
			System.err.println("Number -1 is Invalid");	
		}
	}

}

=============================================================
64

package BasicPrograms;

public class pro62 {

	public static void main(String[] args) throws InvalidNumberException {
		pro61 p=new pro61();
		
		try 
		{
			p.getNumber(50);
		} catch (InvalidNumberException e) {
			//System.out.println("Number is Invalid");
		}
		
	}

}

======================================================================

65

package BasicPrograms;

class Parent12
{
	
}

class child12 extends Parent12
{
	
}

public class pro63 {

	public static void main(String[] args) {
		
		pro63 p=new pro63();
		
		String str="Hello";
		
		boolean b = str instanceof String;
		
		System.out.println(b);

	    b= p instanceof Object;
	    
	    System.out.println(b);

	    child12 c=new child12();
	    
	    System.out.println(c instanceof child12);
	    
	    
	}

}

==============================================================

66

package BasicPrograms;

class myThread1 extends Thread
{
	public void run()                              // Thread will run
	{
		System.out.println("Run method called...");
	}
}

public class pro64 {

	public static void main(String[] args) {
		
		myThread1 t1=new myThread1();   // Thread is created : thread object is t1
		
		t1.start();    // Thread is in Ready state
		
		myThread1 t2=new myThread1();   // Thread is created : thread object is t2
		
		t2.start();    // Thread is in Ready state
		
		
		System.out.println("In Main Thread");
		
	}

}

=============================================================

67
package BasicPrograms;

class myThread2 implements Runnable
{
	@Override
	public void run() 
	{
		System.out.println("In Run method");
	}	
}

public class pro65 {

	public static void main(String[] args) {
		myThread2 t1=new myThread2();
		
		Thread th1=new Thread(t1);    // th1 is thread object
		
		th1.start();
	
		Thread th2=new Thread(t1);    // th2 is thread object

		th2.start();
	}
}

========================================================
68
package BasicPrograms;

class ABC
{
	public void fun()
	{
		System.out.println("Hello");
	}
}

class myThread3 extends ABC implements Runnable
{
	String getName()
	{
		return "Welcome "+Thread.currentThread().getName();
	}
	
	@Override
	public void run() {
		System.out.println(Thread.currentThread().getName());
		fun();
	}	
}


public class pro66 {

	public static void main(String[] args) {
		myThread3 t1=new myThread3();
		Thread th1=new Thread(t1);
		th1.setPriority(8);
		th1.setName("first_Thread");

		th1.start();
		
		Thread th2=new Thread(t1);
		
		th2.setName("second_Thread");
		th2.start();
				
		//System.out.println(th1.getName());
		//System.out.println(th2.getName());
		//System.out.println(Thread.currentThread().getName());
		
		System.out.println(th1.getName()+" "+th1.getPriority());
		
		System.out.println(t1.getName());
	}
}

=========================================================================================

69

package BasicPrograms;

import java.util.Scanner;

public class pro67 {

	boolean getStatus(String st)
	{
		if(st.equalsIgnoreCase("India"))
			return true;
		else
			return false;
	}
	
	public static void main(String[] args) {
		Scanner s=new Scanner(System.in);
		System.out.println("Enter Country");
		String country=s.nextLine();
		
		pro67 p=new pro67();
		boolean st=p.getStatus(country);
		
		if(st)
		{
			System.out.println("Indian Citizen");
		}
		else
		{
			System.out.println("NRI");
		}
	}
}

========================================================================
70
package BasicPrograms;


class myThread4 extends Thread
{
	public void run()
	{
		for(int i=0;i<10;i++)
		{
			try 
			{
				Thread.sleep(1000);    // Used to Allow a Currently running thread to go into waiting state
			} 
			catch (InterruptedException e) 
			{
				e.printStackTrace();
			}
			
			System.out.println(Thread.currentThread().getName()+" "+i);
		}
	}
}
public class pro68 {

	public static void main(String[] args) {
		
		myThread4 t1=new myThread4();
		myThread4 t2=new myThread4();
		myThread4 t3=new myThread4();
		
		t1.start();
		t2.start();
		t3.start();
		System.out.println(Thread.currentThread().getName());
		
	}

}

===========================================================================

71
package BasicPrograms;

class myThread5 extends Thread
{
	public void run()
	{
		for(int i=0;i<5;i++)
		{
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println(i);
		}
	}
}
public class pro69 {

	public static void main(String[] args) {
		myThread5 t1=new myThread5();
		myThread5 t2=new myThread5();
		myThread5 t3=new myThread5();
		
		t1.start();
		
		try 
		{
			t1.join();
		} 
		catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		t2.start();
		
		try {
			t2.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		t3.start();

	}

}

========================================================================

72
package BasicPrograms;

class myThread6 extends Thread
{
	public void run()
	{
		if(Thread.currentThread().isDaemon())
			System.out.println(getName()+" "+"Thread is Daemon");
		else
			System.out.println(getName()+" "+"User Thread");
	}
}
public class pro70 {

	public static void main(String[] args) {
		myThread6 t1=new myThread6();
		myThread6 t2=new myThread6();
		myThread6 t3=new myThread6();
		
		t1.start();
		
		t2.setDaemon(true);
		t2.start();
		
		t3.setDaemon(true);
		t3.start();
		
		System.out.println(Thread.currentThread().isDaemon());

	}

}

==========================================================================

73
package BasicPrograms;

import javax.management.RuntimeErrorException;

class User
{
	public void show()
	{
		System.out.println("Hello");
	}
}

public class pro71 {

	public static void main(String[] args) {
		User u1=new User();
		User u2=new User();
		
		u1.show();
		
		u1=null;  // Nullifyng reference vaiable
		//u1.show();
		
		u2=u1;     // Reassigning the refernce variable
		
		//System.gc();
		//  Runtime rt=new Runtime();
		
		Runtime rt=Runtime.getRuntime();  // Factory method : returns the object of a specific type
		
		System.out.println("Total memory on Heap : "+rt.totalMemory());
		System.out.println("Available Memory : "+rt.freeMemory());
		
		System.gc();
		System.out.println("Total memory on Heap : "+rt.totalMemory());
		System.out.println("Available Memory : "+rt.freeMemory());
		
	}

}

==========================================================================

74

package BasicPrograms;

class Square
{
	synchronized void printSquare(int n)  // Synchronized method : will be executed by a single thread at a time 
	{                                     // No other thread will be given a chance to execute this method until 
		for(int i=1;i<=n;i++)             // the current thread completes the execution of this method.
		{
			System.out.println(i*i);
			
			try {
				Thread.sleep(500);
			} catch (Exception e) {
		
			}
		}
	}
}

class Thr1 extends Thread
{
	Square t;
	
	public Thr1(Square s) {
		t=s;
	}
	
	public void run()
	{
		t.printSquare(5);
	}
}


class Thr2 extends Thread
{
	Square t;
	
	public Thr2(Square s) {
		t=s;
	}
	
	public void run()
	{
		t.printSquare(3);
	}
}

public class pro73 {

	public static void main(String[] args) {
		Square ob=new Square();
		
		Thr1 t1=new Thr1(ob);
		Thr2 t2=new Thr2(ob);

		t1.start();
		t2.start();
	}

}

===============================================================================

75

package BasicPrograms;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

public class pro74 {
	/*
	public void fun()
	{
		int x=20;
		{
			int y=30;
			System.out.println(y);
			System.out.println(x);
		}
		//System.out.println(y);
		System.out.println(x);
	}
	*/
	
	public static String getDate(LocalDate ld)
	{
		return "Todays date : "+ld.getDayOfMonth();
	}
	
	public static void main(String[] args) {
		LocalDate dt=LocalDate.now();
		
		System.out.println(dt);
		
		System.out.println(dt.getDayOfMonth() +" "+dt.getMonthValue()+" "+dt.getYear());
	
		String temp= getDate(dt);
		System.out.println(temp);
	
		System.out.println("Year length : "+dt.lengthOfYear());
		
		LocalDate yesterday=dt.minusDays(1);
		
		System.out.println(yesterday);
		
		LocalDate tomorrow=dt.plusDays(1);
		System.out.println(tomorrow);
		
		LocalDate dt1=LocalDate.of(2019, 4, 25);
		System.out.println(dt1);
		
		LocalDate dt3=LocalDate.of(2013, 2, 28);
		System.out.println(dt3.isLeapYear());
		
		LocalDateTime d1=LocalDateTime.now();
		System.out.println(d1);
		
		DateTimeFormatter dtf=DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
		String mydate = d1.format(dtf);
		System.out.println(mydate);
		
		dtf=DateTimeFormatter.ofPattern("dd/MM/yyyy");
		mydate = d1.format(dtf);
		System.out.println(mydate);
		
		
		dtf=DateTimeFormatter.ofPattern("dd-MMM-yyyy");
		mydate = d1.format(dtf);
		System.out.println(mydate);
		
		dtf=DateTimeFormatter.ofPattern("E,MMM dd yyyy");
		mydate = d1.format(dtf);
		System.out.println(mydate);
		
		LocalTime lt=LocalTime.now();
		System.out.println(lt);
		
		LocalTime lt1=LocalTime.of(13,30,25);
		System.out.println(lt1);
		
		
		
		
	}

}
============================================================================

76

package BasicPrograms;

import java.util.StringTokenizer;

public class pro75 {

	public static void main(String[] args) {
		String str="Java is a programming Language";
		
		StringTokenizer stk=new StringTokenizer(str);
		
		while(stk.hasMoreElements())
		{
			System.out.println(stk.nextElement());
		}

		String str1="Java-is- a- programming -Language s";
		
		StringTokenizer stk1=new StringTokenizer(str1,"-");
		
		while(stk1.hasMoreElements())
		{
			System.out.println(stk1.nextElement());
		}
		
		String str2="Java is a programming Language";
		
		StringTokenizer stk2=new StringTokenizer(str2," ");
		System.out.println("Total no of tokens : "+stk2.countTokens());
		
		while(stk2.hasMoreTokens())
		{
			System.out.println(stk2.nextToken());
			//System.out.println(stk2.nextElement());
		}
		
		System.out.println("Total no of tokens : "+stk2.countTokens());
	}

}

============================================================================

77

package BasicPrograms;

public class pro76 {

	public static void main(String[] args) {
		String message="Welcome to Strings";
		
		String []str = message.split(" ");

		int cnt=0;
		for(String word:str)
		{
			System.out.println(word);
			cnt++;
		}
		
		System.out.println("Total words : "+cnt);
		
		System.out.println("Total words : "+str.length);
		
		System.out.println("Length of first word : "+str[0].length());
		
		System.out.println("Total characters : "+message.length());
	}

}

===============================================================================

78

package BasicPrograms;

enum Fruits
{
	MANGO(101),ORANGE(102),BANANA(103),APPLE(104);
	
	int x;
	Fruits(int y)
	{
		x=y;
	}
}

public class pro77 {

	enum products                  // Defining enum inside a class
	{
		MOBILES,LAPTOPS,HARDDISK,MOTHERBOARD;
		
		String brand;              // instance variable
		products()                 // Constructor in enum
		{
			brand="Samsung";
		}
		
		String getBrand()         // method in enum
		{
			return brand;
		}
	}
	
	public static void main(String[] args) {
		//System.out.println(Fruits.APPLE);
		//System.out.println(Fruits.MANGO);
		
		Fruits f=Fruits.BANANA;
		System.out.println(f+" "+f.x);
		
	    f=Fruits.APPLE;
		System.out.println(f+" "+f.x);

		f=Fruits.MANGO;
		System.out.println(f+" "+f.x);

		f=Fruits.ORANGE;
		System.out.println(f+" "+f.x);
				
		f=Fruits.APPLE;
		switch (f) {
		case APPLE:
		         System.out.println("Fruit is Apple");
			break;
		case BANANA:
				 System.out.println("Fruit is Banana");
			break;
		default:
			     System.out.println("Invalid");
			break;
		}
		
		// Accessing enum values using values()
	
		for(Fruits ft: Fruits.values())
		{
			System.out.println(ft);
		}

		//////////////////////////////////////////////////
		
		products p=products.MOBILES;
		System.out.println("Brand name : "+p.brand+" Product : "+p);

		p=products.LAPTOPS;
		System.out.println("Brand name : "+p.brand+" Product : "+p);

		System.out.println(p.getBrand());
	}

}

=================================================================

79

package BasicPrograms;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class pro78 {

	public static void main(String[] args) {
		ArrayList list=new ArrayList();
		
		list.add("Sachin");
		list.add(35);           // Integer i=35;
		list.add(1.2);
		list.add('A');
		
		System.out.println(list);
		
		ArrayList<Double> list1=new ArrayList<Double>();
		
		list1.add(1.2);        // add() : adds an objects into the list. ArrayList method
		list1.add(1.3);
		list1.add(1.4);

		System.out.println(list1);

	
		// ArrayList<double> list2=new ArrayList<double>();  // Collection is applicable for only objects

		ArrayList<String> list2=new ArrayList<String>();
		
		list2.add("Ajay");
		list2.add("Rahul");
		list2.add("Vijay");
		list2.add("Sanjay");
		
		System.out.println(list2);
		
		
		
		//List<Integer> ages=new ArrayList<Integer>();
		
		ArrayList<Integer> ages=new ArrayList<Integer>();
		ages.add(20);
		ages.add(30);
		ages.add(40);
		
		System.out.println(ages);
		
		// 1st way to access
		System.out.println(ages.get(1));   // get() used to access the element of ArrayList at a specific index
		
		// 2nd way to access
		for(Integer in:ages)               // foreach loop to access ArrayList elements
		{
			System.out.print(in+" ");
		}
		
		System.out.println("\n========================");
		// 3rd way to acccess
		Iterator<Integer> it=ages.iterator();
		
		while(it.hasNext())
		{
			System.out.print(it.next()+" ");
		}
		
	}

}

====================================================================================

80

package BasicPrograms;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;

public class pro79 {

	int x=3000;
	public String toString()
	{
		return "x : "+x;
	}
	public static void add(ArrayList<Integer> l,int item)
	{
		l.add(item);          // add() is inserting an element in the list
	}


	public static void add(ArrayList<Integer> l,int index,int item)
	{
		l.add(index,item);    // add() is inserting an element at a specified index
	}

	public static void add(ArrayList<Integer> l1,ArrayList<Integer> l2)
	{
		l1.addAll(l2);    // addAll() is inserting elements of one collection into other collection
	}

	
	public static void display(ArrayList<Integer> l)
	{
		Iterator<Integer> it=l.iterator();
		
		System.out.print("\nArray List is : ");
		while(it.hasNext())
		{
			System.out.print(it.next()+" ");
		}
	}
	
	public static int search(ArrayList<Integer> l,int index)
	{
		return l.get(index);   
	}
	
	public static boolean search(int itemtoBeSearched,ArrayList<Integer> l)
	{
		return l.contains(itemtoBeSearched);   // checks an element in the list
	}
	
	public static void update(ArrayList<Integer> l,int index,int item)
	{
		l.set(index,item);        // Update the value at specified index
	}
	
	public static void remove(ArrayList<Integer> l,int index)
	{
		l.remove(index);         // remove element at a specified index
	}
	
	public static int getNoOfElements(ArrayList<Integer> l)
	{
		return l.size();         // To return no of elements in the list
	}
	
	
	public static void main(String[] args) {
		ArrayList<Integer> li=new ArrayList<Integer>();
		
		add(li,10);
		add(li,20);
		add(li,30);
		add(li,40);
		add(li,50);
		add(li,60);
		
		display(li);
		System.out.println();
		
		int i=3;
		System.out.println("Element returned at position :"+i+" is "+search(li, i));
	
		add(li, 1, 500);
		display(li);
		
		ArrayList<Integer> li1=new ArrayList<Integer>();
		add(li1, 400);
		add(li1, 500);
		add(li1, 600);
		add(li1, 600);
		add(li1, 600);
		
		add(li, li1);
		display(li1);
		display(li);
		
		update(li, 1,2000);
		display(li);
	
		remove(li, 0);
		display(li);
		
		System.out.println("\nTotal elements : "+getNoOfElements(li));
		
		if(search(600, li))
		{
			int index=li.indexOf(600);     // returns the index of element

			int lastindex=li.lastIndexOf(600);     // returns the index of element

			System.out.println("Item found in list at index "+index+" Last index is : "+lastindex);
		}
			
		else
			System.out.println("Item not found");
		
		
		if(li.isEmpty())                         // Checking a list is empty or not
			System.out.println("List is empty");
		else
			System.out.println("List not empty");
		
		display(li);
		
		li.sort(Comparator.naturalOrder());   // arranging elements in ascending order
		
		display(li);
		
		li.sort(Comparator.reverseOrder());   // arranging elements in reverse order
		
		display(li);
		
		
		//li.clear();               // removes all elements from the list
		
		//li.toString();
		
		display(li);
		System.out.println();
		System.out.println("List "+li);
		
		li.add(5000);
		li.sort(Comparator.reverseOrder());   // arranging elements in reverse order
		
		display(li);
		
		pro79 ob=new pro79();
		System.out.println();
		System.out.println(ob);
	}

}

=========================================================================================

81

package BasicPrograms;

import java.util.ArrayList;

// Program to create ArrayList of Customers object

class Customers
{
	int cid;
	String cname;
	String city;
	
	public Customers(int cid, String cname, String city) {
		this.cid = cid;
		this.cname = cname;
		this.city = city;
	}
}

public class pro80 {

	public static void main(String[] args) {
		ArrayList<Customers> al=new ArrayList<Customers>();
		
		Customers c1=new Customers(106,"Manish", "Goa");  
		al.add(new Customers(101, "Vijay", "Mumbai"));    //Adding object of customer class
		al.add(new Customers(102, "Ajay", "Mumbai"));
		al.add(new Customers(103, "Vikas", "Delhi"));
		al.add(new Customers(104, "Amit", "Patna"));
		al.add(new Customers(105, "Sonu", "Pune"));
		al.add(c1);
		
		for(Customers c:al)
		{
			System.out.println(c.cid+"-"+c.cname+"-"+c.city);
		}
	}

}

================================================================================

82

package BasicPrograms;

import java.util.ArrayList;
import java.util.ListIterator;

public class pro81 {

	public static void main(String[] args) {
		ArrayList<String> l=new ArrayList<String>();
		
		l.add("Pune");
		l.add("Delhi");
		l.add("Patna");
		l.add("Kanpur");
		l.add("Raipur");
		
		System.out.println("List : "+l);
		
		ListIterator<String> li=l.listIterator(l.size());
		
		System.out.print("ArrayList in Reverse order :");
		while(li.hasPrevious())
		{
			System.out.print(li.previous()+" ");
		}
		
		System.out.println();
		System.out.println(l);
		
		for(int i=0;i<l.size();i++)
		{
			System.out.print(l.get(i)+" ");
		}
	}

}

==============================================================================
83
package BasicPrograms;

import java.util.ArrayList;

class Product1
{
	String pname;
	int qty;
	public Product1(String pname, int qty) {
		this.pname = pname;
		this.qty = qty;
	}
	@Override
	public String toString() {
		return "pname=" + pname + ", qty=" + qty ;
	}	
}

public class pro82 {

	public static void main(String[] args) {
		ArrayList<Product1> al=new ArrayList<Product1>();
		
		al.add(new Product1("Samsung DVD", 11));
		al.add(new Product1("USB", 5));
		al.add(new Product1("PAN Drive", 11));
		
		for(Product1 p:al)
		{
			System.out.println(p);
		}
	}

}

==========================================================================

84

package BasicPrograms;

import java.util.ArrayList;

public class pro83 {

	public static void main(String[] args) {
		ArrayList<String> lang=new ArrayList<String>();
		
		lang.add("C++");
		lang.add("Java");
		lang.add(".Net");
		
		System.out.println(lang);

		String str[]=new String[lang.size()];
		
		lang.toArray(str);   // Converting a List into Array
		
		for(String s : str)
		{
			System.out.println(s);
		}
	}

}

==============================================================================

85

package BasicPrograms;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

public class pro84 {

	public static void convertToArrayList(Integer n[])
	{
		List<Integer> i=Arrays.asList(n);
		
		ArrayList<Integer> al=new ArrayList<Integer>(i);
		System.out.println(al);
		
		al.add(4);
		System.out.println(al);
	}
	
	public static void convertToLinkedList(Integer n[])
	{
		List<Integer> i=Arrays.asList(n);
		
		LinkedList<Integer> al=new LinkedList<Integer>(i);
		System.out.println(al);
		
		al.add(4);
		System.out.println(al);
		
	}
	public static void main(String[] args) {
		String str[]= {"Hello","Hi","Welcome"};

		List<String> l= Arrays.asList(str);   // asList() : To convert from Array to List

		System.out.println(l);
		
	    Integer num[]={1,2,3};
		
		convertToArrayList(num);
		
		convertToLinkedList(num);
	}

}

=================================================================================

86
package BasicPrograms;

import java.util.Iterator;
import java.util.LinkedList;

public class pro85 {

	
	public static void display(LinkedList<Integer> l)
	{
		Iterator<Integer> it=l.iterator();
		System.out.println();
		while(it.hasNext())
		{
			System.out.print(it.next()+" ");
		}
	}
	
	public static void main(String[] args) {
		LinkedList<Integer> l=new LinkedList<Integer>();
		
		l.add(100);
		l.add(200);
		l.add(300);
			
		display(l);
		l.addFirst(400);   // adds node at the beginning of list
		
		display(l);
		
		l.addLast(500);    // adds node at the end of list
		display(l);
		
		l.add(2, 600);     // adds node at specific location of list
		display(l);
		
		l.remove();   // removes first node of the list
		display(l);
		
		l.removeLast();  // removes last node of the list
		display(l);
		
		l.removeFirst();  // removes first node of the list
		display(l);
		
		l.remove(2);   // removes specific node of the list at index 2
		display(l);
		
		System.out.println();
		int index=l.indexOf(600);
		l.remove(index);
		display(l);
		
		l.clear();   // remove all nodes from list
		
		display(l);
		System.out.println(l.size());
		
		System.out.println(l.isEmpty());
		
		try 
		{
			System.out.println(l.get(0));
		} 
		catch (Exception e) {
			System.out.println("Index not available");
			l.add(100);
		}

		System.out.println(l.isEmpty());
		l.add(200);
		l.add(100);
		display(l);
		
		l.removeLastOccurrence(100);
		display(l);
		l.add(200);
		l.add(100);
		
		display(l);
		l.removeFirstOccurrence(200);
		l.removeLastOccurrence(100);
		display(l);
        l.add(300);
        l.add(400);
        l.add(500);
        display(l);
        
        System.out.println();
		Iterator<Integer> it= l.descendingIterator();
		while(it.hasNext())
		{
			System.out.print(it.next()+" ");
		}
		
		System.out.println();
		System.out.println("First element : "+l.peek());   // peek() returns the first element of list
		
		display(l);
		
		System.out.println("\nFirst element : "+l.peekFirst());  // returns first element without removing it
		display(l);
		
		System.out.println("\nLast element : "+l.peekLast());  // returns last element without removing it
		display(l);
		System.out.println();
		System.out.println(l.poll());
		display(l);
		
		System.out.println();
		System.out.println(l.pollFirst());
		display(l);
		
		l.pollLast();
		display(l);
		
		
	}

}

===================================================================================


